window.addEventListener("DOMContentLoaded", function() {
    Highcharts.setOptions({
        lang: {
            decimalPoint: ",",
            thousandsSep: ".",
            numericSymbols: null
        }
    })
});
var OPMAG_CHARTS = function($) {
    "use strict";
    var _zoom = 1,
        _cheese = !1; - 1 !== window.location.search.indexOf("cheese") && (_zoom = 2, _cheese = !0, $("body").css({
        width: "1200px"
    }).addClass("cheese"));
    var _parentUrl = function() {
        var isInIframe = parent !== window,
            parentUrl = null;
        isInIframe && (parentUrl = document.referrer);
        return parentUrl
    }();
    _parentUrl && _parentUrl.split("/").length < 5 && $("body").addClass("homepage"), $(window).width();
    var _HC = null;

    function _resizeContainerFrame() {
        setTimeout(function() {
            var msg = {
                sentinel: "amp",
                type: "embed-size",
                height: document.body.scrollHeight + 10
            };
            window.parent.postMessage(msg, "*"), window.top.postMessage(msg, "*")
        }, 100)
    }

    function _checkNested(obj) {
        for (var args = Array.prototype.slice.call(arguments, 1), i = 0; i < args.length; i++) {
            if (!obj || !obj.hasOwnProperty(args[i])) return;
            obj = obj[args[i]]
        }
        return 1
    }

    function _showLegendItem(context, highchartsID) {
        var dirtyString, chart = $("#" + highchartsID).highcharts(),
            cat = $("<div></div>", {
                class: "legend-item-cat",
                text: (dirtyString = context.name, $("<div/>").html(dirtyString).text())
            }),
            container = $(".opmag-chart-legend").empty().append(cat),
            C = context.index;
        chart.xAxis[0].removePlotBand("plot-band-1"), chart.xAxis[0].addPlotBand({
            from: C - .5,
            to: C + .5,
            color: "#f1f1f1",
            borderColor: "#dadada",
            borderWidth: 1,
            id: "plot-band-1"
        }), $.each(chart.series, function(index, value) {
            var val, L, S, legend_item, col = value.legendLine ? (L = $(value.legendLine.element).clone(), S = $(value.legendSymbol.element).clone(), $('<svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" width="20px" height="20px">').append(L, S)) : $("<div></div>", {
                    class: "legend-item-col"
                }).css({
                    backgroundColor: value.data[C].color
                }),
                valN = Highcharts.numberFormat(value.data[C].y);
            valN = String(valN).replace(",00", "") + highcharts_value_suffix, val = $("<div></div>", {
                class: "legend-item-val",
                text: valN
            }), legend_item = $("<div></div>", {
                class: "opmag-chart-legend-item"
            }).append(col, val), container.append(legend_item)
        })
    }
    return window.addEventListener("message", function(event) {
        "export2CSV" === event.data.type && $(".opmag-charts table").show().table2csv().hide()
    }, !1), {
        init: function() {
            $(".legend-toggle").click(function() {
                $("#linkurius-legend").toggleClass("legend-closed"), $("#linkurius-legend").toggleClass("legend-opened"), _resizeContainerFrame()
            }), $.each(window.highcharts_presets, function(selector, value) {
                var basePreset = window.highcharts_presets[selector],
                    baseCustom = function(zoom) {
                        for (var baseCustom = {
                                chart: {},
                                xAxis: {},
                                yAxis: {},
                                plotOptions: {
                                    series: {
                                        dataLabels: {}
                                    }
                                },
                                responsive: {
                                    rules: [{
                                        condition: {
                                            maxWidth: 768
                                        },
                                        chartOptions: {
                                            chart: {},
                                            xAxis: {},
                                            yAxis: {},
                                            plotOptions: {
                                                series: {
                                                    dataLabels: {}
                                                }
                                            }
                                        }
                                    }]
                                }
                            }, presets = [{
                                set: "mobile",
                                root: baseCustom.responsive.rules[0].chartOptions
                            }, {
                                set: "desktop",
                                root: baseCustom
                            }], i = 0; i < presets.length; i++) {
                            var K = window.highcharts_custom[presets[i].set],
                                O = presets[i].root;
                            K && (K.height && (O.chart.height = Number(K.height)), K.spacingTop && (O.chart.spacingTop = Number(K.spacingTop) * zoom), K.spacingBottom && (O.chart.spacingBottom = Number(K.spacingBottom) * zoom), K.marginLeft && (O.chart.marginLeft = Number(K.marginLeft) * zoom), K.marginRight && (O.chart.marginRight = Number(K.marginRight) * zoom), K.pointWidth && (O.plotOptions.series.pointWidth = Number(K.pointWidth)), K.pointPadding && (O.plotOptions.series.pointPadding = Number(K.pointPadding)), -1 !== K.dataLabels && (O.plotOptions.series.dataLabels.enabled = Boolean(Number(K.dataLabels))), K.scaleMinX && (O.xAxis.min = Number(K.scaleMinX)), K.scaleMaxX && (O.xAxis.max = Number(K.scaleMaxX)), K.tickAmountX && (O.xAxis.tickAmount = Number(K.tickAmountX)), K.scaleMinY && (O.yAxis.min = Number(K.scaleMinY)), K.scaleMaxY && (O.yAxis.max = Number(K.scaleMaxY)), K.tickAmountY && (O.yAxis.tickAmount = Number(K.tickAmountY)))
                        }
                        return baseCustom
                    }(_zoom),
                    basePreset = jQuery.extend(!0, {}, basePreset, baseCustom);
                "undefined" != typeof highcharts_preset_override && (basePreset = jQuery.extend(!0, {}, basePreset, highcharts_preset_override)), _checkNested(basePreset, "plotOptions", "series", "pointWidth") && (basePreset.plotOptions.series.pointWidth = Number(basePreset.plotOptions.series.pointWidth) * _zoom), _checkNested(basePreset, "plotOptions", "series", "pointPadding") && (basePreset.plotOptions.series.pointPadding = Number(basePreset.plotOptions.series.pointPadding) * _zoom), _checkNested(basePreset, "chart", "height") && (basePreset.chart.height = Number(basePreset.chart.height) * _zoom), $(".opmag-charts." + selector + " table").each(function(tableIdx) {
                    var tableID = $(this).prop("id"),
                        tableTitleClass = tableID.replace("tablepress-", "tablepress-table-name-id-"),
                        highchartsID = (tableID.replace("tablepress-", "tablepress-table-description-id-"), tableID + "-highcharts"),
                        height = 300,
                        tableRows = $(this).find("tbody tr").length;
                    switch (_checkNested(basePreset, "chart", "type") && basePreset.chart.type, basePreset.chart.type) {
                        case "bar":
                            var pointWidth = _checkNested(basePreset, "plotOptions", "series", "pointWidth") ? Number(basePreset.plotOptions.series.pointWidth) : 20 * _zoom,
                                pointPadding = _checkNested(basePreset, "plotOptions", "series", "pointPadding") ? Number(basePreset.plotOptions.series.pointPadding) : 10 * _zoom,
                                rowHeight = pointWidth + pointPadding,
                                spacingTop = _checkNested(basePreset, "chart", "spacingTop") ? Number(basePreset.chart.spacingTop) * _zoom : 10 * _zoom,
                                spacingBottom = _checkNested(basePreset, "chart", "spacingBottom") ? Number(basePreset.chart.spacingBottom) * _zoom : 15 * _zoom,
                                height = _checkNested(basePreset, "chart", "height") ? basePreset.chart.height : spacingTop + tableRows * rowHeight + 2 * pointPadding + spacingBottom + 65 * _zoom,
                                xAxisLabelAlign = "left",
                                xAxisReserveSpace = !0
                    }
                    height = Math.max(height, 230 * _zoom), $('<div id="' + highchartsID + '"  class="highcharts-wrapper ' + selector + '_wrapper"></div>').insertBefore(this);
                    var config = {
                        chart: {
                            style: {
                                fontFamily: '"Roboto", -apple-system, BlinkMacSystemFont, "Segoe UI", Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;',
                                fontSize: 14 * _zoom + "px"
                            },
                            spacingTop: 0,
                            marginBottom: 65 * _zoom,
                            animation: !1,
                            height: height,
                            events: {
                                render: function() {
                                    var msg = {
                                        sentinel: "amp",
                                        type: "embed-size",
                                        height: document.body.scrollHeight + 10
                                    };
                                    setTimeout(function() {
                                        window.parent.postMessage(msg, "*")
                                    }, 100), setTimeout(function() {
                                        window.top.postMessage(msg, "*")
                                    }, 100)
                                }
                            },
                            backgroundColor: "#f9f9f9"
                        },
                        data: {
                            table: tableID,
                            decimalPoint: ","
                        },
                        title: {
                            text: $("." + tableTitleClass).text()
                        },
                        plotOptions: {
                            series: {
                                animation: !1,
                                dataLabels: {
                                    style: {
                                        fontSize: 14 * _zoom + "px",
                                        fontWeight: 400,
                                        color: "#333333",
                                        textOutline: "none"
                                    }
                                },
                                cursor: "pointer",
                                point: {
                                    events: {
                                        click: function() {
                                            _showLegendItem(this, highchartsID)
                                        },
                                        mouseOver: function() {
                                            _showLegendItem(this, highchartsID)
                                        }
                                    }
                                },
                                marker: {
                                    symbol: "circle"
                                }
                            }
                        },
                        colors: ["#ce2b30"],
                        yAxis: {
                            labels: {
                                style: {
                                    fontSize: 12 * _zoom + "px",
                                    fontWeight: 400,
                                    color: "#333333"
                                }
                            },
                            title: {
                                text: null
                            },
                            gridLineColor: null,
                            gridLineWidth: 0
                        },
                        xAxis: {
                            labels: {
                                style: {
                                    fontSize: 14 * _zoom + "px",
                                    fontWeight: 400,
                                    color: "#333333"
                                },
                                align: xAxisLabelAlign,
                                reserveSpace: xAxisReserveSpace
                            },
                            lineWidth: 0,
                            tickLength: 0
                        },
                        legend: {
                            verticalAlign: "top",
                            align: "left",
                            symbolRadius: 0,
                            symbolPadding: 7 * _zoom,
                            padding: 0,
                            itemMarginBottom: 10,
                            itemStyle: {
                                fontWeight: "normal",
                                fontSize: 14 * _zoom + "px"
                            }
                        },
                        tooltip: {
                            borderColor: "#737373",
                            borderRadius: 0,
                            backgroundColor: "#ffffff",
                            shadow: !1,
                            style: {
                                fontSize: 14 * _zoom + "px"
                            },
                            enabled: !1,
                            valueSuffix: highcharts_value_suffix
                        },
                        credits: {
                            href: null,
                            text: ""
                        },
                        exporting: {
                            sourceWidth: 1012,
                            sourceHeight: height
                        }
                    };
                    _checkNested(basePreset, "plotOptions", "series", "dataLabels", "formatter"), _checkNested(basePreset, "tooltip", "valueSuffix") || (config.tooltip.valueSuffix = highcharts_value_suffix);
                    var extPreset = jQuery.extend(!0, {}, config, basePreset);
                    _cheese && _checkNested(extPreset, "chart", "marginRight") && (extPreset.chart.marginRight *= _zoom), _HC = Highcharts.chart(highchartsID, extPreset), _cheese || _showLegendItem(_HC.series[0].data[0], highchartsID)
                })
            }), _resizeContainerFrame()
        }
    }
}(jQuery);
"complete" === document.readyState ? OPMAG_CHARTS.init() : window.addEventListener("load", OPMAG_CHARTS.init, 0);